{"ast":null,"code":"import NFTContractBuild from 'contracts/NFT.json';\nimport Web3 from 'web3';\nimport RequestContractBuild from 'contracts/RequestManager.json';\nimport factoryBuild from 'contracts/Factory.json';\nimport tokenBuild from 'contracts/ERC20Example.json';\nlet selectedAccount;\nlet erc20Contract;\nlet requestContract;\nlet BurnContract;\nlet readContract;\nlet erc20ExampleContract;\nlet factoryContract;\nlet isInitialized = false;\nexport const init = async () => {\n  let provider = window.ethereum;\n\n  if (typeof provider !== 'undefined') {\n    provider.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      selectedAccount = accounts[0];\n      console.log(`Selected account is ${selectedAccount}`);\n    }).catch(err => {\n      console.log(err);\n      return;\n    });\n    window.ethereum.on('accountsChanged', function (accounts) {\n      selectedAccount = accounts[0];\n      console.log(`Selected account changed to ${selectedAccount}`);\n    });\n  }\n\n  const web3 = new Web3(provider);\n  const erc20ExAbi = [{\n    inputs: [],\n    name: \"name\",\n    \"outputs\": [{\n      \"internalType\": \"string\",\n      \"name\": \"\",\n      \"type\": \"string\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{\n      \"internalType\": \"string\",\n      \"name\": \"\",\n      \"type\": \"string\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{\n      \"internalType\": \"uint256\",\n      \"name\": \"\",\n      \"type\": \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }];\n  factoryContract = new web3.eth.Contract(factoryBuild.abi, \"0xb774abA64eE5e6DE4238D48AFC41D3EeB2A2D775\");\n  erc20ExampleContract = new web3.eth.Contract(erc20ExAbi, '0xB93c86916ca6c5526faF2F2Fb83c8990283c3435');\n  isInitialized = true;\n};\nexport const requestMint2 = async (gameID, amount, managerAddr) => {\n  if (!isInitialized) {\n    await init();\n  }\n\n  let mintContract;\n  let provider = window.ethereum;\n  const web3 = new Web3(provider);\n  mintContract = new web3.eth.Contract(RequestContractBuild.abi, managerAddr);\n  return mintContract.methods.requestMint(gameID, amount).send({\n    from: selectedAccount\n  });\n};\nexport const requestBurn = async (gameID, amount, managerAddr) => {\n  if (!isInitialized) {\n    await init();\n  }\n\n  return BurnContract.methods.requestBurn(gameID, amount).send({\n    from: selectedAccount\n  });\n};\nexport const read = async () => {\n  if (!isInitialized) {\n    await init();\n  }\n\n  return readContract.methods.read().send({\n    from: selectedAccount\n  });\n};\nexport const getTokenInfo = async address => {\n  if (!isInitialized) {\n    await init();\n  }\n\n  let tokenContract;\n  let provider = window.ethereum;\n  const web3 = new Web3(provider);\n  tokenContract = new web3.eth.Contract(tokenBuild.abi, address);\n  const name = await tokenContract.methods.name().call();\n  return name;\n};\nexport const getTokenSymbol = async address => {\n  if (!isInitialized) {\n    await init();\n  }\n\n  let tokenContract;\n  let provider = window.ethereum;\n  const web3 = new Web3(provider);\n  tokenContract = new web3.eth.Contract(tokenBuild.abi, address);\n  const symbol = await tokenContract.methods.symbol().call();\n  return symbol;\n};\nexport const getTokenSupply = async address => {\n  if (!isInitialized) {\n    await init();\n  }\n\n  let tokenContract;\n  let provider = window.ethereum;\n  const web3 = new Web3(provider);\n  tokenContract = new web3.eth.Contract(tokenBuild.abi, address);\n  const supply = await tokenContract.methods.totalSupply().call();\n  return supply;\n};","map":{"version":3,"names":["NFTContractBuild","Web3","RequestContractBuild","factoryBuild","tokenBuild","selectedAccount","erc20Contract","requestContract","BurnContract","readContract","erc20ExampleContract","factoryContract","isInitialized","init","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","on","web3","erc20ExAbi","inputs","name","stateMutability","type","outputs","eth","Contract","abi","requestMint2","gameID","amount","managerAddr","mintContract","methods","requestMint","send","from","requestBurn","read","getTokenInfo","address","tokenContract","call","getTokenSymbol","symbol","getTokenSupply","supply","totalSupply"],"sources":["/Users/bagdongho/Desktop/web3-tutorials/WEB3-TUTORIAL/src/Web3Client.js"],"sourcesContent":["import NFTContractBuild from 'contracts/NFT.json';\nimport Web3 from 'web3';\nimport RequestContractBuild from 'contracts/RequestManager.json';\nimport factoryBuild from 'contracts/Factory.json';\nimport tokenBuild from 'contracts/ERC20Example.json';\n\nlet selectedAccount;\nlet erc20Contract;\nlet requestContract;\nlet BurnContract;\nlet readContract;\nlet erc20ExampleContract;\nlet factoryContract;\nlet isInitialized = false;\n\nexport const init = async () => {\n\tlet provider = window.ethereum;\n\n\tif (typeof provider !== 'undefined') {\n\t\tprovider\n\t\t\t.request({ method: 'eth_requestAccounts' })\n\t\t\t.then((accounts) => {\n\t\t\t\tselectedAccount = accounts[0];\n\t\t\t\tconsole.log(`Selected account is ${selectedAccount}`);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn;\n\t\t\t});\n\n\t\twindow.ethereum.on('accountsChanged', function (accounts) {\n\t\t\tselectedAccount = accounts[0];\n\t\t\tconsole.log(`Selected account changed to ${selectedAccount}`);\n\t\t});\n\t}\n\n\tconst web3 = new Web3(provider);\n\n\tconst erc20ExAbi = [\n\t\t{\n\t\t\tinputs: [],\n\t\t\tname: \"name\",\n\t\t\t\"outputs\": [\n\t\t\t\t{\n\t\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tstateMutability: \"view\",\n\t\t\ttype: \"function\"\n\t\t},\n\t\t{\n\t\t\tinputs: [],\n\t\t\tname: \"symbol\",\n\t\t\toutputs: [\n\t\t\t\t{\n\t\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tstateMutability: \"view\",\n\t\t\ttype: \"function\"\n\t\t},\n\t\t{\n\t\t\tinputs: [],\n\t\t\tname: \"totalSupply\",\n\t\t\toutputs: [\n\t\t\t\t{\n\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tstateMutability: \"view\",\n\t\t\ttype: \"function\"\n\t\t}\n\t\n\t];\n\n\tfactoryContract = new web3.eth.Contract(\n\t\tfactoryBuild.abi, \"0xb774abA64eE5e6DE4238D48AFC41D3EeB2A2D775\"\n\t);\n\n\n\terc20ExampleContract = new web3.eth.Contract(\n\t\terc20ExAbi,\n\t\t'0xB93c86916ca6c5526faF2F2Fb83c8990283c3435'\n\t);\n\t\n\n\tisInitialized = true;\n};\n\n\nexport const requestMint2 = async (gameID, amount, managerAddr) => {\n\tif (!isInitialized) {\n\t\tawait init();\n\t}\n\n\tlet mintContract;\n\tlet provider = window.ethereum;\n\tconst web3 = new Web3(provider);\n\tmintContract = new web3.eth.Contract(\n\t\tRequestContractBuild.abi, managerAddr\n\t);\n\n\treturn mintContract.methods\n\t\t.requestMint(gameID, amount)\n\t\t.send({from: selectedAccount});\n}\n\nexport const requestBurn = async (gameID, amount, managerAddr) => {\n\tif (!isInitialized) {\n\t\tawait init();\n\t}\n\n\treturn BurnContract.methods\n\t\t.requestBurn(gameID, amount)\n\t\t.send({from: selectedAccount});\n}\n\nexport const read = async() => {\n\tif (!isInitialized) {\n\t\tawait init();\n\t}\n\n\treturn readContract.methods.read().send({from: selectedAccount});\n}\n\nexport const getTokenInfo = async (address) => {\n\tif (!isInitialized) {\n\t\tawait init();\n\t}\n\tlet tokenContract;\n\tlet provider = window.ethereum;\n\tconst web3 = new Web3(provider);\n\ttokenContract = new web3.eth.Contract(\n\t\ttokenBuild.abi, address\n\t);\n\tconst name = await tokenContract.methods.name().call();\n\treturn name;\n};\n\nexport const getTokenSymbol = async (address) => {\n\tif (!isInitialized) {\n\t\tawait init();\n\t}\n\tlet tokenContract;\n\tlet provider = window.ethereum;\n\tconst web3 = new Web3(provider);\n\ttokenContract = new web3.eth.Contract(\n\t\ttokenBuild.abi, address\n\t);\n\tconst symbol = await tokenContract.methods.symbol().call();\n\treturn symbol;\n};\n\nexport const getTokenSupply = async (address) => {\n\tif (!isInitialized) {\n\t\tawait init();\n\t}\n\tlet tokenContract;\n\tlet provider = window.ethereum;\n\tconst web3 = new Web3(provider);\n\ttokenContract = new web3.eth.Contract(\n\t\ttokenBuild.abi, address\n\t);\n\tconst supply = await tokenContract.methods.totalSupply().call();\n\treturn supply;\n};\n"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AAEA,IAAIC,eAAJ;AACA,IAAIC,aAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,oBAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,aAAa,GAAG,KAApB;AAEA,OAAO,MAAMC,IAAI,GAAG,YAAY;EAC/B,IAAIC,QAAQ,GAAGC,MAAM,CAACC,QAAtB;;EAEA,IAAI,OAAOF,QAAP,KAAoB,WAAxB,EAAqC;IACpCA,QAAQ,CACNG,OADF,CACU;MAAEC,MAAM,EAAE;IAAV,CADV,EAEEC,IAFF,CAEQC,QAAD,IAAc;MACnBf,eAAe,GAAGe,QAAQ,CAAC,CAAD,CAA1B;MACAC,OAAO,CAACC,GAAR,CAAa,uBAAsBjB,eAAgB,EAAnD;IACA,CALF,EAMEkB,KANF,CAMSC,GAAD,IAAS;MACfH,OAAO,CAACC,GAAR,CAAYE,GAAZ;MACA;IACA,CATF;IAWAT,MAAM,CAACC,QAAP,CAAgBS,EAAhB,CAAmB,iBAAnB,EAAsC,UAAUL,QAAV,EAAoB;MACzDf,eAAe,GAAGe,QAAQ,CAAC,CAAD,CAA1B;MACAC,OAAO,CAACC,GAAR,CAAa,+BAA8BjB,eAAgB,EAA3D;IACA,CAHD;EAIA;;EAED,MAAMqB,IAAI,GAAG,IAAIzB,IAAJ,CAASa,QAAT,CAAb;EAEA,MAAMa,UAAU,GAAG,CAClB;IACCC,MAAM,EAAE,EADT;IAECC,IAAI,EAAE,MAFP;IAGC,WAAW,CACV;MACC,gBAAgB,QADjB;MAEC,QAAQ,EAFT;MAGC,QAAQ;IAHT,CADU,CAHZ;IAUCC,eAAe,EAAE,MAVlB;IAWCC,IAAI,EAAE;EAXP,CADkB,EAclB;IACCH,MAAM,EAAE,EADT;IAECC,IAAI,EAAE,QAFP;IAGCG,OAAO,EAAE,CACR;MACC,gBAAgB,QADjB;MAEC,QAAQ,EAFT;MAGC,QAAQ;IAHT,CADQ,CAHV;IAUCF,eAAe,EAAE,MAVlB;IAWCC,IAAI,EAAE;EAXP,CAdkB,EA2BlB;IACCH,MAAM,EAAE,EADT;IAECC,IAAI,EAAE,aAFP;IAGCG,OAAO,EAAE,CACR;MACC,gBAAgB,SADjB;MAEC,QAAQ,EAFT;MAGC,QAAQ;IAHT,CADQ,CAHV;IAUCF,eAAe,EAAE,MAVlB;IAWCC,IAAI,EAAE;EAXP,CA3BkB,CAAnB;EA2CApB,eAAe,GAAG,IAAIe,IAAI,CAACO,GAAL,CAASC,QAAb,CACjB/B,YAAY,CAACgC,GADI,EACC,4CADD,CAAlB;EAKAzB,oBAAoB,GAAG,IAAIgB,IAAI,CAACO,GAAL,CAASC,QAAb,CACtBP,UADsB,EAEtB,4CAFsB,CAAvB;EAMAf,aAAa,GAAG,IAAhB;AACA,CA9EM;AAiFP,OAAO,MAAMwB,YAAY,GAAG,OAAOC,MAAP,EAAeC,MAAf,EAAuBC,WAAvB,KAAuC;EAClE,IAAI,CAAC3B,aAAL,EAAoB;IACnB,MAAMC,IAAI,EAAV;EACA;;EAED,IAAI2B,YAAJ;EACA,IAAI1B,QAAQ,GAAGC,MAAM,CAACC,QAAtB;EACA,MAAMU,IAAI,GAAG,IAAIzB,IAAJ,CAASa,QAAT,CAAb;EACA0B,YAAY,GAAG,IAAId,IAAI,CAACO,GAAL,CAASC,QAAb,CACdhC,oBAAoB,CAACiC,GADP,EACYI,WADZ,CAAf;EAIA,OAAOC,YAAY,CAACC,OAAb,CACLC,WADK,CACOL,MADP,EACeC,MADf,EAELK,IAFK,CAEA;IAACC,IAAI,EAAEvC;EAAP,CAFA,CAAP;AAGA,CAfM;AAiBP,OAAO,MAAMwC,WAAW,GAAG,OAAOR,MAAP,EAAeC,MAAf,EAAuBC,WAAvB,KAAuC;EACjE,IAAI,CAAC3B,aAAL,EAAoB;IACnB,MAAMC,IAAI,EAAV;EACA;;EAED,OAAOL,YAAY,CAACiC,OAAb,CACLI,WADK,CACOR,MADP,EACeC,MADf,EAELK,IAFK,CAEA;IAACC,IAAI,EAAEvC;EAAP,CAFA,CAAP;AAGA,CARM;AAUP,OAAO,MAAMyC,IAAI,GAAG,YAAW;EAC9B,IAAI,CAAClC,aAAL,EAAoB;IACnB,MAAMC,IAAI,EAAV;EACA;;EAED,OAAOJ,YAAY,CAACgC,OAAb,CAAqBK,IAArB,GAA4BH,IAA5B,CAAiC;IAACC,IAAI,EAAEvC;EAAP,CAAjC,CAAP;AACA,CANM;AAQP,OAAO,MAAM0C,YAAY,GAAG,MAAOC,OAAP,IAAmB;EAC9C,IAAI,CAACpC,aAAL,EAAoB;IACnB,MAAMC,IAAI,EAAV;EACA;;EACD,IAAIoC,aAAJ;EACA,IAAInC,QAAQ,GAAGC,MAAM,CAACC,QAAtB;EACA,MAAMU,IAAI,GAAG,IAAIzB,IAAJ,CAASa,QAAT,CAAb;EACAmC,aAAa,GAAG,IAAIvB,IAAI,CAACO,GAAL,CAASC,QAAb,CACf9B,UAAU,CAAC+B,GADI,EACCa,OADD,CAAhB;EAGA,MAAMnB,IAAI,GAAG,MAAMoB,aAAa,CAACR,OAAd,CAAsBZ,IAAtB,GAA6BqB,IAA7B,EAAnB;EACA,OAAOrB,IAAP;AACA,CAZM;AAcP,OAAO,MAAMsB,cAAc,GAAG,MAAOH,OAAP,IAAmB;EAChD,IAAI,CAACpC,aAAL,EAAoB;IACnB,MAAMC,IAAI,EAAV;EACA;;EACD,IAAIoC,aAAJ;EACA,IAAInC,QAAQ,GAAGC,MAAM,CAACC,QAAtB;EACA,MAAMU,IAAI,GAAG,IAAIzB,IAAJ,CAASa,QAAT,CAAb;EACAmC,aAAa,GAAG,IAAIvB,IAAI,CAACO,GAAL,CAASC,QAAb,CACf9B,UAAU,CAAC+B,GADI,EACCa,OADD,CAAhB;EAGA,MAAMI,MAAM,GAAG,MAAMH,aAAa,CAACR,OAAd,CAAsBW,MAAtB,GAA+BF,IAA/B,EAArB;EACA,OAAOE,MAAP;AACA,CAZM;AAcP,OAAO,MAAMC,cAAc,GAAG,MAAOL,OAAP,IAAmB;EAChD,IAAI,CAACpC,aAAL,EAAoB;IACnB,MAAMC,IAAI,EAAV;EACA;;EACD,IAAIoC,aAAJ;EACA,IAAInC,QAAQ,GAAGC,MAAM,CAACC,QAAtB;EACA,MAAMU,IAAI,GAAG,IAAIzB,IAAJ,CAASa,QAAT,CAAb;EACAmC,aAAa,GAAG,IAAIvB,IAAI,CAACO,GAAL,CAASC,QAAb,CACf9B,UAAU,CAAC+B,GADI,EACCa,OADD,CAAhB;EAGA,MAAMM,MAAM,GAAG,MAAML,aAAa,CAACR,OAAd,CAAsBc,WAAtB,GAAoCL,IAApC,EAArB;EACA,OAAOI,MAAP;AACA,CAZM"},"metadata":{},"sourceType":"module"}