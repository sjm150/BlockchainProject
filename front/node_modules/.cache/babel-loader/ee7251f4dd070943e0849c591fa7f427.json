{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\n\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nvar createHash = require('create-hash');\n\nvar rlp = __importStar(require(\"rlp\"));\n\nvar bytes_1 = require(\"./bytes\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\n\n\nvar keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsBuffer)(a);\n\n  switch (bits) {\n    case 224:\n      {\n        return (0, keccak_1.keccak224)(a);\n      }\n\n    case 256:\n      {\n        return (0, keccak_1.keccak256)(a);\n      }\n\n    case 384:\n      {\n        return (0, keccak_1.keccak384)(a);\n      }\n\n    case 512:\n      {\n        return (0, keccak_1.keccak512)(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n\nexports.keccak = keccak;\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\n\nvar keccak256 = function (a) {\n  return (0, exports.keccak)(a);\n};\n\nexports.keccak256 = keccak256;\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\nvar keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsString)(a);\n  var buf = Buffer.from(a, 'utf8');\n  return (0, exports.keccak)(buf, bits);\n};\n\nexports.keccakFromString = keccakFromString;\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\nvar keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsHexString)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\n\nexports.keccakFromHexString = keccakFromHexString;\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\n\nvar keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsArray)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\n\nexports.keccakFromArray = keccakFromArray;\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\n\nvar _sha256 = function (a) {\n  a = (0, bytes_1.toBuffer)(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\n\n\nvar sha256 = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _sha256(a);\n};\n\nexports.sha256 = sha256;\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\n\nvar sha256FromString = function (a) {\n  (0, helpers_1.assertIsString)(a);\n  return _sha256(a);\n};\n\nexports.sha256FromString = sha256FromString;\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\n\nvar sha256FromArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return _sha256(a);\n};\n\nexports.sha256FromArray = sha256FromArray;\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\nvar _ripemd160 = function (a, padded) {\n  a = (0, bytes_1.toBuffer)(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return (0, bytes_1.setLengthLeft)(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nvar ripemd160 = function (a, padded) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160 = ripemd160;\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\nvar ripemd160FromString = function (a, padded) {\n  (0, helpers_1.assertIsString)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160FromString = ripemd160FromString;\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\n\nvar ripemd160FromArray = function (a, padded) {\n  (0, helpers_1.assertIsArray)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\n\nvar rlphash = function (a) {\n  return (0, exports.keccak)(rlp.encode(a));\n};\n\nexports.rlphash = rlphash;","map":{"version":3,"mappings":"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","names":["createHash","require","keccak","a","bits","Error","exports","keccak256","keccakFromString","buf","Buffer","from","keccakFromHexString","keccakFromArray","_sha256","update","digest","sha256","sha256FromString","sha256FromArray","_ripemd160","padded","hash","ripemd160","ripemd160FromString","ripemd160FromArray","rlphash","rlp","encode"],"sourceRoot":"","sources":["../src/hash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}